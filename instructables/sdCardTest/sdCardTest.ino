// -----------------------------------------------------------------------------
/*
  Micro SD Card Module

  + Read/Write to SD card
  https://www.youtube.com/watch?v=8MvRRNYxy9c

  SPI Reader Micro SD Memory Card TF Memory Card Shield Module for Arduino $1.00
  https://lastminuteengineers.com/arduino-micro-sd-card-module-tutorial/
  https://www.instructables.com/id/Micro-SD-Card-Tutorial/

      Mega Nano - SPI module pins
  Pin 53   10   - CS   : chip/slave select (SS pin). Can be any master(Nano) digital pin to enable/disable this device on the SPI bus.
  Pin 52   13   - SCK  : serial clock, SPI: accepts clock pulses which synchronize data transmission generated by Arduino.
  Pin 51   11   - MOSI : master out slave in, SPI: input to the Micro SD Card Module.
  Pin 50   12   - MISO : master in slave Out, SPI: output from the Micro SD Card Module.
  Pin 5V+  5V+  - VCC  : can use 3.3V or 5V
  Pin GND  GND  - GND  : ground
  Notes,
  + This program was tested successfully with a Mega and a Nano.
  + Pins are declared in the SPI library for SCK, MOSI, and MISO.

  SPI Master/Slave notes with relationship to the SD adapter CS pin and the SD library:
  + The Ardunio pin, that connects to the SD adapter CS pin, is called the slave select(SS) pin. The SD library uses pin 10 as the default SS pin.The library supports only the Arduino device as the master.
  + You can use any Arduino digital pin, to connect to the SD card adapter select pin (CS). If you do use a pin other than 10, make that pin an output pin by adding: pinMode(otherPin, OUTPUT);.
  + When the Arduino's slave select (SS) pin is set low for the SD adapter, the apdapter will communicate with the master which is the Arduino.
  + When it's set high, the SD adapter ignores the master (the Arduino).
  + Selectivity allows you to have multiple SPI devices sharing the same Ardunio bus lines(pins): MISO, MOSI, and CLK.

  Sample programs from the Arduino IDE menu: File/Examples/SD/ReadWrite.

  Reference documentation,
    https://www.arduino.cc/en/reference/SD
  Get SD card information,
    https://www.arduino.cc/en/Tutorial/CardInfo
  List files,
    https://www.arduino.cc/en/Tutorial/listfiles

  Notes,
    Uses short filenames: 8 character plus 3 for the filename extension, for example a2345678.txt.
    File names are not case sensitive.
    Only one file can be open at a time.
    The card must be formatted FAT16 or FAT32.
    Can open files in a directory. For example, SD.open("/myfiles/example.txt").
    Input voltage: from 3.3V â€“ 5V.

  Other functions:
    SD.exists("filename.txt")   File exists.
    SD.remove("unwanted.txt")   Delete a file.
    file.size()                  unsigned long
    isDirectory()               Determine if a file is a directory.
    mkdir("/mynewdir")          Create a subdirectory.
    rmdir()                     Delete a directory.

    To get a file directory, open the first file,
      then use the following open each next files and get the name:
      openNextFile() and Serial.print( name() ).
      See example: listfiles.

  // -----------------------------------------------------------------------------
  +++ Setup.
  + SD card initialized.
  + Delete the file: f1.txt
  + Check if file exists or not.
  ++ Doesn't exist: f1.txt
  +++ Go to loop.

  ---------------------------------------------
  + Loop: do a number of reads and writes.
  ---------------------------------------------

  + Open and write to the file.
  ++ File open: f1.txt, write text to file.
  + File closed.
  + Open read from the file.
  Hello there,
  Line 2: 1, 2, 3.
  Last line.
  + File closed.

  ---------------------------------------------
  + Open and write to the file.
  ++ File open: f1.txt, write text to file.
  + File closed.
  + Open read from the file.
  Hello there,
  Line 2: 1, 2, 3.
  Last line.
  Hello there,
  Line 2: 1, 2, 3.
  Last line.
  + File closed.
  ---------------------------------------------
  + Delete the file: f1.txt
  + Check if file exists or not.
  ++ Doesn't exist: f1.txt

  ---------------------------------------------
  + Loop: do a number of reads and writes.
  ---------------------------------------------

  + Open and write to the file.
  ++ File open: f1.txt, write text to file.
  + File closed.
  + Open read from the file.
  Hello there,
  Line 2: 1, 2, 3.
  Last line.
  + File closed.


*/
// -----------------------------------------------------------------------------
// Used with the SD Card module.
// SPI reference: https://www.arduino.cc/en/Reference/SPI
// SD card library reference: https://www.arduino.cc/en/reference/SD
// I have SD library by Arduiono, SparkFun version 1.2.3.

#include <SPI.h>
#include <SD.h>

String theFilename = "f1.txt";  // Files are created using uppercase: F1.TXT.

// Set to match your SD module to the Nano pin.
// The CS pin is the only one that is not really fixed as any of the Arduino digital pin.
const int csPin = 10;  // SD Card module is connected to Nano pin 10.
// const int csPin = 53;  // SD Card module is connected to Mega pin 53.

File myFile;
File root;

// -----------------------------------------------------------------------------
int HLDA_PIN = 13;  // For testing, flash the onboard LED light.

void ledFlashSuccess() {
  int delayTime = 200;
  for (int i = 0; i < 3; i++) {
    digitalWrite(HLDA_PIN, HIGH);
    delay(delayTime);
    digitalWrite(HLDA_PIN, LOW);
    delay(delayTime);
  }
}
void ledFlashError() {
  int delayTime = 500;
  for (int i = 0; i < 6; i++) {
    digitalWrite(HLDA_PIN, HIGH);
    delay(delayTime);
    digitalWrite(HLDA_PIN, LOW);
    delay(delayTime);
  }
}

// -----------------------------------------------------------------------------
// Open and write a file.

void openWriteFile() {
  myFile = SD.open(theFilename, FILE_WRITE);
  if (!myFile) {
    Serial.print("- Error opening file: ");
    Serial.println(theFilename);
    ledFlashError();
    return;
  }
  if (SD.exists(theFilename)) {
    Serial.print("+ File exists, append text to file: ");
  } else {
    Serial.print("+ Write text into the file: ");
  }
  Serial.println(theFilename);
  //
  // Starts writing from the end of file, i.e. appends to the file.
  myFile.println("Hello there,");
  myFile.println("Line 2: 1, 2, 3.");
  myFile.println("Last line.");
  myFile.close();
  Serial.println("+ File closed.");
  ledFlashSuccess();
}

// -----------------------------------------------------------------------------
// Open and read a file.

void openReadFile() {
  Serial.println("+ Open read from the file.");
  myFile = SD.open(theFilename);
  if (!myFile) {
    Serial.print("- Error opening file: ");
    Serial.println(theFilename);
    ledFlashError();
    return;
  }
  while (myFile.available()) {
    // Reads one character at a time.
    // Serial.print("+ :");
    // Serial.print(myFile.read());  // Prints ascii character number, one per-line.
    // Serial.println(":");
    Serial.write(myFile.read());  // Prints as it was written.
  }
  myFile.close();
  Serial.println("+ File closed.");
  ledFlashSuccess();
}

// -----------------------------------------------------------------------------
// Delete the file and confirm it was deleted.

void deleteFileAndConfirm() {
  Serial.print("+ Delete the file: ");
  Serial.println(theFilename);
  SD.remove(theFilename);
  //
  Serial.println("+ Confirm file was deleted.");
  if (SD.exists(theFilename)) {
    Serial.print("++ File exists, it was not deleted: ");
    ledFlashError();
  } else {
    Serial.print("++ File was deleted: ");
    ledFlashSuccess();
  }
  Serial.println(theFilename);
}

// -----------------------------------------------------------------------------
void printDirectory(File dir, int numTabs) {
  while (true) {
    File entry =  dir.openNextFile();
    if (!entry) {
      // no more files
      break;
    }
    for (uint8_t i = 0; i < numTabs; i++) {
      Serial.print('\t');
    }
    Serial.print(entry.name());
    if (entry.isDirectory()) {
      Serial.println("/");
      printDirectory(entry, numTabs + 1);
    } else {
      // files have sizes, directories do not
      Serial.print("\t\t");
      Serial.println(entry.size(), DEC);
    }
    entry.close();
  }
}

// --------------------------------------------------------------------------
// Handle the case if the card is not inserted. Once inserted, the module will be re-initialized.
boolean sdcardFailed = false;
void initSdcard() {
  sdcardFailed = false;
  if (!SD.begin(csPin)) {
    sdcardFailed = true;
    Serial.println("- Error initializing SD card.");
    return;
  }
  Serial.println("+ SD card initialized.");
}

// -----------------------------------------------------------------------------
void setup() {
  Serial.begin(115200);
  // Give the serial connection time to start before the first print.
  delay(1000);
  Serial.println(""); // Newline after garbage characters.
  Serial.println("+++ Setup.");

  // Note, csPin is optional. The default is the hardware SS line (pin 10) of the SPI bus.
  // If using pin, other than 10, add: pinMode(otherPin, OUTPUT);
  // The pin connected to the chip select pin (CS) of the SD card.
  // Consider using: initSdcard();
  if (!SD.begin(csPin)) {
    Serial.println("- Error initializing SD card.");
    Serial.print("-- Check that SD card is inserted");
    Serial.println(", and that SD card adapter is wired properly.");
  }
  int counter = 0;
  while (!SD.begin(csPin)) {
    Serial.print(".");
    if (counter == 30) {
      Serial.println("");
      counter = 0;
    }
    delay(500);
  }
  Serial.println("+ SD card initialized.");
  ledFlashSuccess();

  Serial.println("");
  Serial.println("---------------------------------------------");
  Serial.println("+ SD card directory listing,");
  root = SD.open("/");
  printDirectory(root, 0);
  Serial.println("+ End listing.");
  Serial.println("");

  // Start by ensuring that the test files do not exist.
  deleteFileAndConfirm();

  Serial.println("+++ Go to loop.");
}

// -----------------------------------------------------------------------------
// Device Loop
void loop() {
  Serial.println("");
  Serial.println("---------------------------------------------");
  Serial.println("+ Loop: do a number of reads and writes.");
  Serial.println("---------------------------------------------");
  Serial.println("");
  openWriteFile();
  delay(3000);
  openReadFile();
  delay(3000);
  Serial.println("");
  Serial.println("---------------------------------------------");
  openWriteFile();
  delay(3000);
  openReadFile();
  delay(3000);
  //
  Serial.println("---------------------------------------------");
  deleteFileAndConfirm();
  delay(10000);
}
// -----------------------------------------------------------------------------
