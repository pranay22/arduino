--------------------------------------------------------------------------------
#  Altair 101 Opcodes

--------------------------------------------------------------------------------
### Conventions used when describing Opcodes

Instruction source and encoding:
  a = A 16 bit address value, often stated in hexadecimal format, example:
        ani 80h ;get A15 alone
  lb  = Low byte of 16 bit value
  hb  = High byte of 16 bit value
  lb hb = A 16 bit address which is 2 bytes, low order byte first, high order byte second.
  p = 8 bit port address, example:
        in 0ffh ;A=front panel switches
      Encoding, 0ffh = 00000000:11111111(binary) = 255(decimal):
        11011011:11111111:00000000(in:lb:hb)

  # = 8 or 16 bit immediate operand, example:
        ani 01h ;get A8 alone
  RP = Register pair (16 bit): B:C(b), D:E(d), H:L(m). For example:
        ldax d ;display bit pattern on upper 8 address lights
  RRR (or R) = Register binary value, example: 010, for register D.
  DDD (or S) = Destination register binary value, example: 011, for register E.
  SSS (or S) = Source register binary value, example: 011, for register E.
  ccc = Conditional
  db  = Data byte (8 bit) value
  pa  = Port address (8 bit) value

lb hb, a 16 bit address:
+ Example: LDA a, encoded as 8 bit (1 byte) opcode, 1 byte lb, 1 byte hb: "00111010 lb hb".

Register pair identifiers:
  b = B:C, 00=B:C
  d = D:E, 01=D:E
  m = H:L, 10=H:L
  m = H:L, 11=SP, Stack pointer, refers to PSW (FLAGS:A) for PUSH/POP.

Register identifiers (binary value=R):
  000=B
  001=C
  010=D
  011=E
  100=H
  101=L

Condition code 'CCC' fields: (FLAGS: S Z x A x P x C)
    000=NZ  ('Z'ero flag not set)
    001=Z   ('Z'ero flag set)
    010=NC  ('C'arry flag not set)
    011=C   ('C'arry flag set)
    100=PO  ('P'arity flag not set - ODD)
    101=PE  ('P'arity flag set - EVEN)
    110=P   ('S'ign flag not set - POSITIVE)
    111=M   ('S'ign flag set - MINUS)

--------------------------------------------------------------------------------
## Programmed Opcodes

Opcodes without parameters in the opcode:
Opcode   Binary      Description
-------------------------------------
nop      00 000 000  No operation
rlc      00 000 111  Rotate a left. Need to handle carry bit.
rrc      00 001 111  Rotate a right (shift byte right 1 bit). Need to handle carry bit.
shld a   00 100 010  Store L value to memory location: a(hb:lb). Store H value at: a + 1.
hlt      01 110 110  Halt processor
jmp a    11 000 011  Unconditional jump
jz  a    11 001 010  If compareResult is true, jump to lb hb.
jnc a    11 010 010  Jump if carry bit is 0 (false).
out pa   11 010 011  Write a to output port a.
in  pa   11 011 011  Read input for port a, into A
ani #    11 100 110  AND # (immediate) with register A.
cpi #    11 111 110  Compare db with a > compareResult.

Opcodes with parameters in the opcode, binary ordered:
Opcode   Binary      Description
-------------------------------------
ldax RP  00 RP1 010  Load indirect through BC(RP=00) or DE(RP=01)
inx RP   00 RP0 011  Increment a register pair, example: H:L (a 16 bit value)
mvi R,#  00 RRR 110  Move a number (#), which is the next db, to register RRR.
lxi RP,a 00 RP0 001  RP=10  which matches "10=HL".
dad RP   00 RP1 001  Add register pair(RP) to H:L (16 bit add). And set carry bit.
mov d,S  01 DDD SSS  Move register to a register.
xra R    10 101 SSS  Register exclusive OR with register with A.

--------------------------------------------------------------------------------
### 8080 Opcode List

From list:
file:///Users/dthurston/Projects/arduino/Altair101/documents/8080opcodes.txt
+ 57 opcodes, total
+ 23 opcodes added into the Altair 101 processor.
+ 34 not added.

Added to Altair 101:
Inst      Encoding          Flags   Description
----------------------------------------------------------------------
CPI #     11111110          ZSPCA   Compare immediate with A
MOV D,S   01DDDSSS          -       Move register to register
MVI D,#   00DDD110 db       -       Move immediate to register
LXI RP,#  00RP0001 lb hb    -       Load register pair immediate
LDA a     00111010 lb hb    -       Load A from memory
STA a     00110010 lb hb    -       Store A to memory
SHLD a    00100010 lb hb    -       Store H:L to memory
LDAX RP   00RP1010 *1       -       Load indirect through BC or DE
INR D     00DDD100          ZSPA    Increment register
DCR D     00DDD101          ZSPA    Decrement register
INX RP    00RP0011          -       Increment register pair
DAD RP    00RP1001          C       Add register pair to HL (16 bit add)
ANI #     11100110 db       ZSPCA   AND immediate with A
ORA S     10110SSS          ZSPCA   OR  register with A
XRA S     10101SSS          ZSPCA   ExclusiveOR register with A
RRC       00001111          C       Rotate A right
JMP a     11000011 lb hb    -       Unconditional jump
IN p      11011011 pa       -       Read input port into A
OUT p     11010011 pa       -       Write A to output port
HLT       01110110          -       Halt processor
NOP       00000000          -       No operation

Not added to Altair 101:
Inst      Encoding          Flags   Description
----------------------------------------------------------------------
DCX RP    00RP1011          -       Decrement register pair
LHLD a    00101010 lb hb    -       Load H:L from memory
ORI #     11110110          ZSPCA   OR  immediate with A
ANA S     10100SSS          ZSCPA   AND register with A
CMP S     10111SSS          ZSPCA   Compare register with A
XRI #     11101110 db       ZSPCA   ExclusiveOR immediate with A

Jccc a    11CCC010 lb hb    -       Conditional jump
PCHL      11101001          -       Jump to address in H:L

STAX RP   00RP0010 *1       -       Store indirect through BC or DE
XCHG      11101011          -       Exchange DE and HL content

ADD S     10000SSS          ZSPCA   Add register to A
ADI #     11000110 db       ZSCPA   Add immediate to A
ADC S     10001SSS          ZSCPA   Add register to A with carry
ACI #     11001110 db       ZSCPA   Add immediate to A with carry
SUB S     10010SSS          ZSCPA   Subtract register from A
SUI #     11010110 db       ZSCPA   Subtract immediate from A
SBB S     10011SSS          ZSCPA   Subtract register from A with borrow
SBI #     11011110 db       ZSCPA   Subtract immediate from A with borrow
DAA       00100111          ZSPCA   Decimal Adjust accumulator

RLC       00000111          C       Rotate A left
RAL       00010111          C       Rotate A left through carry
RAR       00011111          C       Rotate A right through carry
CMA       00101111          -       Compliment A
CMC       00111111          C       Compliment Carry flag
STC       00110111          C       Set Carry flag
CALL a    11001101 lb hb    -       Unconditional subroutine call
Cccc a    11CCC100 lb hb    -       Conditional subroutine call
RET       11001001          -       Unconditional return from subroutine
Rccc      11CCC000          -       Conditional return from subroutine
RST n     11NNN111          -       Restart (Call n*8)

PUSH RP   11RP0101 *2       -       Push register pair on the stack
POP RP    11RP0001 *2       *2      Pop  register pair from the stack
XTHL      11100011          -       Swap H:L with top word on stack
SPHL      11111001          -       Set SP to content of H:L
EI        11111011          -       Enable interrupts
DI        11110011          -       Disable interrupts

*2 = RP=11 refers to PSW for PUSH/POP (cannot push/pop SP).
     When PSW is POP'd, ALL flags are affected.

--------------------------------------
### To Do to Run Kill the Bit and Pong Altair 8800 programs

CALL a    11001101 lb hb    -       Unconditional subroutine call
RET       11001001          -       Unconditional return from subroutine
PUSH RP   11RP0101 *2       -       Push register pair on the stack
POP RP    11RP0001 *2       *2      Pop  register pair from the stack

Kill the Bit opcodes:
        Code     Octal    Inst Param  Encoding Flags  Description
const byte IN     = 0333; IN p      11011011 pa       -       Read input port into A

Pong opcodes:
        Code     Octal    Inst Param  Encoding Flags  Description
ora S     10110SSS          ZSPCA   OR  register with A
ani #     11100110 db       ZSPCA   AND immediate with A
ret       11001001          -       Unconditional return from subroutine

-----------------------------------------------------------
Destination and Source registers and register pairs.

byte regA = 0;   111=A  a  register A, or Accumulator
                           --------------------------------
                           Register pair 'RP' fields:
byte regB = 0;   000=B  b  00=BC   (B:C as 16 bit register)
byte regC = 0;   001=C  c
byte regD = 0;   010=D  d  01=DE   (D:E as 16 bit register)
byte regE = 0;   011=E  e
byte regH = 0;   100=H  h  10=HL   (H:L as 16 bit register)
byte regL = 0;   101=L  l
                           11=SP   (Stack pointer, refers to PSW (FLAGS:A) for PUSH/POP)
byte regM = 0;   110=M  m  Memory reference for address in H:L

-----------------------------------------------------------------------------
### Reference Links

  Altair 8800 Operator's Manual.pdf has a description of each opcode.

  Reference document, Intel 8080 Assembly Language Programming Manual:
    https://altairclone.com/downloads/manuals/8080%20Programmers%20Manual.pdf

  This section is base on section 26: 8080 Instruction Set
    https://www.altairduino.com/wp-content/uploads/2017/10/Documentation.pdf

  Text listing of 8080 opcodes:
    http://www.classiccmp.org/dunfield/r/8080.txt

  Binary calculator:
    https://www.calculator.net/binary-calculator.html

-----------------------------------------------------------------------------
Opcodes that are programmed and tested:
````
       Code   Octal       Inst Param  Encoding Flags  Description
const byte cpi    = 0376; cpi db    11 111 110        Compare db with a > compareResult.
const byte jz     = 0312; jz   lb hb  11001010        If compareResult is true, jump to lb hb.

Opcode notes, more details:
--------------------------
       inx                Not done for the stack pointer.
       ldax d : Load the accumulator from memory location 938Bh, where register d contains 93H and register e contains 8BH.
````
-----------------------------------------------------------------------------
Cheers