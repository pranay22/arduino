// -----------------------------------------------------------------------------
//  Programing links

  Bitwise, shift right:
    https://www.arduino.cc/reference/en/language/structure/bitwise-operators/bitshiftright/
  Exclusive or (XOR):
    https://www.arduino.cc/reference/en/language/structure/bitwise-operators/bitwisexor/

// -----------------------------------------------------------------------------
// Sample machine code programs.

// Define a jump loop program byte array.
byte jumpLoopProgram[] = {
  0303, 0006, 0000, // 0 1 2
  0000, 0000, 0000, // 3 4 5
  0303, 0000, 0000  // 6 7 8
};

// Define a jump loop program with NOP instructions.
byte jumpLoopNopProgram[] = {
  0303, 0004, 0000, // 0 1 2
  0000, 0000, 0000, // 3 4 5
  0303, 0000, 0000  // 6 7 8
};

byte TestProgram[] = {
  0303, 0003, 0000, // 0 1 2 JMP to address: 4 
  0041, 0006, 0000, // 3 4 5 LXI_HL lb hb. Load 0000:0006 into register H:L.
  0303, 0000, 0000  // 6 7 8
};

// Define a jump loop program
//    with a halt(HLT binary 01 110 110 = octal 166) instruction,
//    and NOP instructions.
byte jumpHaltLoopProgram[] = {
  0303, 0006, 0000,
  0000, 0000, 0000,
  0166, 0000, 0000,
  0303, 0000, 0000
};

// Sample to test:
//  LXI_HL : Intialize address value in H:L.
//  MOV_HL : Move the data at address H:L, to register A.
//  INX_HL : Increment the address H:L.
//  HLT    : Halt the program.
//  JMP    : Jump back to the move, and loop.
byte lxiNopLoopProgram[] = {
  //                         Start program.
  0000,                   // NOP
  0041, 14, 0000,         // LXI_HL lb hb. Load 0000:14 into register H:L.
  //
  0176,                   // MOV M:address(H:L):data > register A
  0000,                   // NOP
  0043,                   // INX > Increment H:L
  0000,                   // NOP
  0166,                   // HLT
  0000,                   // NOP
  0303, 0006, 0000,       // JMP to 6, jump to the MOV operation.
  //                         Data
  0000, 0101, 0110,       // 3 4 5
  0111, 0000, 0000,       // 6 7 8
  //
  0000, 0000, 0000  //       end
};
// byte NopLxiMovInxHltJmpCpiProgram[] = {
byte NopLxiMovInxHltJmpCpiProgram[] = {
  // ------------------------------------------------------------------
  // Initialize memory read location to memory start.
  // Move the first data byte to the accumulator, which is register A.
  // While not hit the end character (0111)
  //    Increment the memory pointer (H:L).
  //    Move the next data byte to the accumulator.
  //    Halt the process.
  //    Restart the while loop.
  // End while.
  // Restart the program from memory initialization.
  //
  //                Start program.
  0000,             // NOP
  0041, 24, 0000,   // LXI_HL lb hb. Load hb:lb into registers H(hb):L(lb).
  0176,             // MOV M:address(H:L):data > register A
  //
  //                While address:data != 0111
  0376, 0111,             // CPI Compare A with 0111.
  0312, 19, 0000,         // JZ lb hb. If it matches, jump to lb hb (end while)
  0000,                   // NOP
  0166,                   // HLT
  0043,                   // INX > Increment H:L
  0176,                   // MOV M:address(H:L):data > register A
  0000,                   // NOP
  0303, 0005, 0000,       // JMP to the start of the while loop.
  //                End while.
  0000,             // NOP
  0166,             // HLT
  0000,             // NOP
  0303, 1, 0000,    // JMP to 1. Restart: jump to program start.
  // ------------------------------------------------------------------
  //                Data, starts at address 24.
  0000, 0101, 0001, // 5 6 7
  0010, 0110, 0111, // 8 9 0
  //
  0000, 0000, 0000  //       end
};
byte theProgram[] = {
  /*
//         Code     Octal    Inst Param  Encoding Param  Flags  Description
const byte DAD_BC = 0011; // DAD         00001001          C    Add B:C to H:L. Set carry bit.
//                           DAD  RP     00RP1001          C    Add register pair to HL (16 bit add)
//                           Set carry bit if the addition causes a carry out.
const byte JNC =    0322; // JNC  lb hb  11010010               Jump if carry bit is 0 (false).

   */
  // ------------------------------------------------------------------
  // Initialize memory read location to memory start.
  // Move the first data byte to the accumulator, which is register A.
  // While not hit the end character (0111)
  //    Increment the memory pointer (H:L).
  //    Move the next data byte to the accumulator.
  //    Halt the process.
  //    Restart the while loop.
  // End while.
  // Restart the program from memory initialization.
  //
  //                Start program.
  0000,             // NOP
  0166,             // HLT  : Halt to check the program listing.
  0006, 0776,       // MVI  B,db : Move db to register B.
  0016, 0777,       // MVI  C,db : Move db to register B.
  //                While address:data != 0111
  0376, 0111,             // DAD Add B:C to H:L. Set carry bit.
  0312, 19, 0000,         // JNC lb hb. If carry bit false, jump to lb hb (end while)
  0000,                   // NOP
  0000,                   // NOP
  0000,                   // NOP
  0000,                   // NOP
  0166,                   // HLT
  0043,                   // INX > Increment B
  0000,                   // NOP
  0303, 0005, 0000,       // JMP to the start of the while loop.
  //                End while.
  0000,             // NOP
  0166,             // HLT
  0000,             // NOP
  0303, 1, 0000,    // JMP to 1. Restart: jump to program start.
  // ------------------------------------------------------------------
  //                Data, starts at address 24.
  0000, 0101, 0001, // 5 6 7
  0010, 0110, 0111, // 8 9 0
  //
  0000, 0000, 0000  //       end
};

byte theProgram[] = {
  // ------------------------------------------------------------------
  // Test: MVI, DAD, JNC
  //                Start program.
  0000,             // NOP
  //                               Set B:C to 0000:1
  0006, 0000,       // MVI  B,db : Move db to register B.
  0016, 0001,       // MVI  C,db : Move db to register C.
  //                               Set
  0041, 0373, 0377, // LXI_HL lb hb. Load into register H:L = 377:373 = 65531.
  //                Until !carry bit {
  0000,               // NOP
  0166,               // HLT
  0011,               // DAD Add B:C to H:L. Set carry bit at: 65535.
  0322,  8, 0000,     // JNC lb hb. If carry bit false, jump to lb hb (end while)
  0303, 17, 0000,     // JMP to the start of the while loop.
  //                }
  0166,             // HLT
  0000,             // NOP
  0303, 1, 0000,    // JMP to 1. Restart: jump to program start.
  // ------------------------------------------------------------------
  //                Data, starts at address ?
  0000, 0101, 0001, // 5 6 7
  0010, 0110, 0111, // 8 9 0
  0000, 0000, 0000  //       end
};

/*
  00 000 000 = 000 =   0 2^0
  00 000 001 = 002 =   1 2^0
  00 000 010 = 002 =   2 2^1
  00 000 100 = 040 =   4 2^2
  00 001 000 = 010 =   8 2^3
  00 010 000 = 020 =  16 2^4
  00 100 000 = 014 =  32 2^5
  01 000 000 = 014 =  64 2^6
  10 000 000 = 014 = 128 2^7
                     256 2^8
                     512 2^9
                    1024 2^10  1K
                    2048 2^11  2K
                    4096 2^12  4K
                    8192 2^13  8K
                   16384 2^14 16K
                   32768 2^15 32k
                   65535 2^16 64k
*/

// -----------------------------------------------------------------------------

