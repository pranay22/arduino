// Opcode table of information
// Opcode:Byte-Description
// Note, a comment with a second ":" will cause an error in the sort classes. Even though, the sorted listings work fine.

// ------------------------------------
// Steps to add opcodes:
// + Add into here (asmOpcodes.txt).
// + Add opcode into asmProcessor.java: parseOpcode(...), based on opcode parameters:
// + Implement into Processor.ino. Binary values match the values in here (asmOpcodes.txt).

// -------------------------
// Operation codes

nop:00000000:NOP      00 000 000  1  No operation. I added a delay: delay(100).
hlt:01110110:HLT      01 110 110  1  Halt processor.
call:11001101:CALL a   11 001 101  3  Unconditional subroutine call. Push current address onto the stack and jump the subroutine address.
ret:11001001:RET      11 001 001  1  Unconditional return from subroutine. Pop the call address from the stack and continue to the next address.

in:11011011:IN pa    11 011 011  2  Read port a data into the accumulator. Example, a=0377 is the sense switches.
out:11100011:OUT pa   11 010 011  2  Write the accumulator data out to port a. I'm using this opcode to write custom log messages such as echoing the registers.

// -------------------------
// Compare and branching

cmp:10111SSS:CMP S    10 111 SSS  1  Compare register(S: B,C,D,E,H,L, or M) with register A, then set flags. If S==A, ZeroBit=1 & CarryBit=0. If S!=A, ZeroBit=0. If S>A, CarryBit=1. If S<A, CarryBit=0.
cmpa:10111111:|A - A
cmpb:10111000:|A - B
cmpc:10111001:|A - C
cmpd:10111010:|A - D
cmpe:10111011:|A - E
cmph:10111100:|A - H
cmpl:10111101:|A - L
cmpm:10111110:|A - (HL)
cpi:11111110:CPI #    11 111 110  2  Compare #(immediate value) to A. If #==A, ZeroBit=1 & CarryBit=0. If #!=A, ZeroBit=0. If #>A, CarryBit=1. If #<A, CarryBit=0.

jz:11001010:JZ a     11 001 010  3  Jump to a, if zero bit flag is set (equals 1).
jnz:11000010:JNZ a    11 000 010  3  Jump to a, if Zero bit flag is not set (equals 0).
jc:11011010:JC a     11 011 010  3  Jump to a, if Carry bit flag is set (equals 1).
jnc:11010010:JNC a    11 010 010  3  Jump to a, if Carry bit flag is not set (equals 0).
jmp:11000011:JMP a    11 000 011  3  Unconditional jump to address a.

// -------------------------
// Moving data around

sta:00110010:STA a    00 110 010  3  A -> (adr): Store register A to the address, a(lb:hb), lowbyte followed by the highbyte.
lda:00111010:LDA a    00 111 010  3  (adr) -> A: Load register A with data from the address, a(lb:hb).
shld:00100010:SHLD a   00 100 010  3  L->(adr);H->(adr+1): Store register data values to memory locations: register L a(address hb:lb). Store register H to: a + 1.
lhld:00101010:LHLD a   00 101 010  3  (adr)->L;(adr+1)->H: Load registers H and L (H:L) with address values a and a+1.
ldax:00RP1010:LDAX RP  00 RP1 010  1  Load data value at the register pair address (B:C(RP=00) or D:E(RP=01)), into register A.
ldaxb:00001010:|(BC) -> A
ldaxd:00011010:|(DE) -> D
lxi:00RP0001:LXI RP,a 00 RP0 001  3  byte3(hb)->R,byte2(lb)->P:Move the address, a(lb:hb), into register pair: B:C, D:E, or H:L. To do: move data to the stack pointer address.
lxib:00000001:|byte 3 -> B, byte 2 -> C (hb->B,lb->C)
lxid:00010001:|byte 3 -> D, byte 2 -> E (hb->D,lb->E)
lxih:00100001:|byte 3 -> H, byte 2 -> L (hb->H,lb->L)
lxisp:00110001:|Not implemented.
mov:01DDDSSS:MOV D,S  01 DDD SSS  1  Move source register(SSS) data, to the destination(DDD) register(A,B,C,D,E,H, or L). If source(S) is M(110), move data from address H:L(H is hb,L is lb), to destination(D).
movab:01111000:|B -> A
movac:01111001:|C -> A
movad:01111010:|D -> A
movae:01111011:|E -> A
movah:01111100:|H -> A
moval:01111101:|L -> A
movba:01000111:|A -> A
movbc:01000001:|C -> B
movbd:01000010:|D -> B
movbe:01000011:|E -> B
movbh:01000100:|H -> B
movbl:01000101:|L -> B
movca:01001111:|A -> C
movcb:01001000:|B -> C
movcd:01001010:|D -> C
movce:01001011:|E -> C
movch:01001100:|H -> C
movcl:01001101:|L -> C
movda:01010111:|A -> D
movdb:01010000:|B -> D
movdc:01010001:|C -> D
movde:01010011:|E -> D
movdh:01010100:|H -> D
movdl:01010101:|L -> D
movea:01011111:|A -> E
moveb:01011000:|B -> E
movec:01011001:|C -> E
moved:01011010:|D -> E
moveh:01011100:|H -> E
movel:01011101:|L -> E
movha:01100111:|A -> H
movhb:01100000:|B -> H
movhc:01100001:|C -> H
movhd:01100010:|D -> H
movhe:01100011:|E -> H
movhl:01100101:|L -> H
movla:01101111:|A -> L
movlb:01101000:|B -> L
movlc:01101001:|C -> L
movld:01101010:|D -> L
movle:01101011:|E -> L
movlh:01101100:|K -> L
movam:01111110:|A->(HL)
movbm:01000110:|B->(HL)
movcm:01001110:|C->(HL)
movdm:01010110:|D->(HL)
movem:01011110:|E->(HL)
movhm:01100110:|H->(HL)
movlm:01101110:|L->(HL)
mvi:00RRR110:MVI R,#  00 RRR 110  2  Move #(immediate value) to a register (R).
mvia:00111110:|A <- byte 2
mvib:00000110:|B <- byte 2
mvic:00001110:|C <- byte 2
mvid:00010110:|D <- byte 2
mvie:00011110:|E <- byte 2
mvih:00100110:|H <- byte 2
mvil:00101110:|L <- byte 2
push:11RP0101:PUSH RP  11 RP0 101  1  Push a register pair (RP) onto the stack: B:C, D:E, H:L. To do, push flags.
pushb:11000101:|(sp-2)<-C; (sp-1)<-B; sp <- sp - 2
pushd:11010101:|(sp-2)<-E; (sp-1)<-D; sp <- sp - 2
pushh:11100101:|(sp-2)<-L; (sp-1)<-H; sp <- sp - 2
pushf:11110101:|(sp-2)<-flags; (sp-1)<-A; sp <- sp - 2
pop:11RP0001:POP RP   11 RP0 001  1  Pop a register pair (RP) from the stack: B:C, D:E, H:L. To do, pop flags.
popb:11000001:|C <- (sp); B <- (sp+1); sp <- sp+2
popd:11010001:|E <- (sp); D <- (sp+1); sp <- sp+2
poph:11100001:|L <- (sp); H <- (sp+1); sp <- sp+2
popf:11110001:|flags <- (sp); A <- (sp+1); sp <- sp+2

// -------------------------
// Math related

dcr:00DDD101:DCR D    00 DDD 101  1  Decrement a register DDD(A,B,C,D,E,H, or L). To do, set flags: ZSPA.
dcra:00111101:|A-1 -> A
dcrb:00000101:|B-1 -> B
dcrc:00001101:|C-1 -> C
dcrd:00010101:|D-1 -> D
dcre:00011101:|E-1 -> E
dcrh:00100101:|H-1 -> H
dcrl:00101101:|L-1 -> L
inr:00DDD100:INR D    00 DDD 100  1  Increment register DDD(A,B,C,D,E,H, or L). To do, set flags: ZSPA.
inra:00111100:|A+1 -> A
inrb:00000100:|B+1 -> B
inrc:00001100:|C+1 -> C
inrd:00010100:|D+1 -> D
inre:00011100:|E+1 -> E
inrh:00100100:|H+1 -> H
inrl:00101100:|L+1 -> L
inrm:00101100:|(HL)+1 -> (HL)
inx:00RP0011:INX RP   00 RP0 011  1  Increment a register pair value(16 bit value): B:C, D:E, H:L. To do: increment the stack pointer.
inxb:00000011:|BC = BC+1
inxd:00010011:|DE = DE+1
inxh:00100011:|HL = HL+1
dcx:00RP1011:DCX RP   00 RP1 011  1  Decrement a register pair value(16 bit value): B:C, D:E, H:L.
dcxb:00001011:|BC = BC-1
dcxd:00011011:|DE = DE-1
dcxh:00101011:|HL = HL-1

adi:11000110:ADI #    11 000 110  3  Add #(immediate value) to register A, set: ZSCPA.
sui:11010110:SUI #    11 010 110  3  Subtract #(immediate value) from register A, set ZSCPA.
add:10000SSS:ADD SSS  10 000 SSS  1  Add source register to register A, set: ZSCPA.
addb:10000000:|B+A -> A
addc:10000001:|C+A -> A
addd:10000010:|D+A -> A
adde:10000011:|E+A -> A
addh:10000100:|H+A -> A
addl:10000101:|L+A -> A
addm:10000110:|(HL)+A -> A
adda:10000111:|A+A -> A
dad:00RP1001:DAD RP   00 RP1 001  1  16 bit add. Add register pair(RP: B:C or D:E) to H:L, into H:L. And set carry bit.
dadb:00001001:|HL = HL + BC
dadd:00101001:|HL = HL + DE

// -------------------------
// Bit and logic applied to a register or byte.

ani:11100110:ANI #    11 100 110  2  AND #(immediate value) with register A.
ora:10110SSS:ORA S    10 110 SSS  1  OR register S, with register A.
oraa:10110111:|A | A -> A
orab:10110000:|B | A -> A
orac:10110001:|C | A -> A
orad:10110010:|D | A -> A
orae:10110011:|E | A -> A
orah:10110100:|H | A -> A
oral:10110101:|L | A -> A
oram:10110110:|(HL) | A -> A
xra:10101SSS:XRA R    10 101 SSS  1  Exclusive OR, the register(R) with register A.
xrab:10101111:|A ^ A -> A: Not implemented.
xrab:10101000:|B ^ A -> A
xrac:10101001:|C ^ A -> A
xrad:10101010:|D ^ A -> A
xrae:10101011:|E ^ A -> A
xrah:10101100:|H ^ A -> A
xral:10101101:|L ^ A -> A
xram:10101101:|(HL) ^ A -> A : Not implemented.

rlc:00000111:RLC      00 000 111  1  Rotate accumulator left by shift left 1 bit, and wrapping the first bit to the last position. Need to handle carry bit (CY = prev bit 7).
rrc:00001111:RRC      00 001 111  1  Rotate accumulator right by shift right 1 bit, and wrapping the last bit to the first position. Need to handle carry bit (CY = prev bit 0).

// -----------------------------------------------------------------------------
// 8080/8085 Opcodes Not implemented in the Altair 101 processor or assembler.

aci:11001110:ACI #    11 001 110  ?  Not implemented, Add #(immediate value) to register A with carry (with ZSPCA).
aci:11011110:SBI #    11 011 110  ?  Not implemented, Subtract #(immediate value) from register A with borrow (with ZSPCA).
xri:11101110:XRI #    11 101 110  ?  Not implemented, ExclusiveOR #(immediate value) with register A (with ZSPCA).
ori:11110110:ORI #    11 110 110  ?  Not implemented, OR #(immediate value) with register A (with ZSPCA).

pchl:11101001:PCHL #   11 101 001  ?  Not implemented, Jump to address in H:L.
xchg:11101011:XCHG #   11 101 011  ?  Not implemented, Exchange DE and HL content.

daa:00100111:DAA #    00 100 111  ?  Not implemented, Decimal Adjust accumulator (with ZSPCA).

rlc:00000111:RLC #    00 000 111  ?  Not implemented, Rotate A left, cycle carry bit.
ral:00010111:RAL #    00 010 111  ?  Not implemented, Rotate A right through carry.
rar:00011111:RAR #    00 011 111  ?  Not implemented, Rotate A right through carry.
cma:00101111:CMA #    00 101 111  ?  Not implemented, Compliment A.
stc:00110111:STC #    00 110 111  ?  Not implemented, Set Carry flag.
cmc:00111111:CMC #    00 111 111  ?  Not implemented, Compliment Carry flag.

xthl:11100011:XTHL #   11 100 011  ?  Not implemented, Swap H:L with top word on stack.
sphl:11111001:SPHL #   11 100 011  ?  Not implemented, Set SP to content of H:L.
ei:11111011:EI #     11 100 011  ?  Not implemented, Enable interrupts.
di:11110011:DI #     11 100 011  ?  Not implemented, Disable interrupts.

// Inst      Encoding          Flags   Description
// ----------------------------------------------------------------------

// ANA S     10100SSS          ZSCPA   AND register with A
// STAX RP   00RP0010 *1       -       Store indirect through BC or DE

// ADC S     10001SSS          ZSCPA   Add register to A with carry
// SUB S     10010SSS          ZSCPA   Subtract register from A
// SBB S     10011SSS          ZSCPA   Subtract register from A with borrow

// Cccc a    11CCC100 lb hb    -       Conditional subroutine call
// Rccc      11CCC000          -       Conditional return from subroutine
// RST n     11NNN111          -       Restart (Call n*8)

// Other jumps:
// JM a      11 100 010 lb hb          Jump if minus.
// JP a      11 101 010 lb hb          Jump if positive.
// JPE a     11 110 010 lb hb          Jump if parity even.
// JPO a     11 111 010 lb hb          Jump if parity odd.

// -----------------------------------------------------------------------------
// eof