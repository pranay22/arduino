--------------------------------------------------------------------------------
Confirmed:
+ Byte value to nemonic.
+ Byte value to nemonic + parameters (opcodeSyntaxValue.startsWith(theOpcodeValue)
+ And visual account of correct parameter types.
++ 
                        // Sample:
                        //               10        20      28
                        //      0123456789012345678901234567890123456789
                        //      0x03  1           INX B      BC <- BC+1 
                        //      0x08              -
                        //      0x03  1           INX B      BC <- BC+1           R
                        //  Components:
                        //      opcodeOctal                 03
                        //      opcodeDecimal               3
                        //      opcodeSyntax =              INX B
                        //      opcode =                    INX
                        //      opcodeSyntaxParameters =    B
                        //      opcodeBytesFollowing        0       (number of bytes following the opcode byte)
                        //      opcodeSyntaxValue           inxb    (opcodeSyntax: lowercase, spaces and commas removed)
                        //      opcodeParameterType         R
                        //      opcodeInfo =                BC <- BC+1
                        // Output:
                        //      ++ 003 00000011 INX   inxb  b         R       :BC <- BC+1

+ Assembler opcode file: asmOpcodes.txt
+ Number of opcode byte values = 272
+++ Start.
+ Assembler opcode file: asmOpcodesBinary.txt
+ Number of opcode byte values = 0
+++ Opcode types loaded, count = 77
--------------------------------------------------------------------------------
Decimal  Binary Opcode     Parameters Type     Description

++ 000 00000000 NOP   nop              NA      :No operation
++ 001 00000001 LXI   lxib  b,d16  2           :B <- byte 3, C <- byte 2
++ 002 00000010 STAX  staxb b          R       :(BC) <- A
++ 003 00000011 INX   inxb  b          R       :BC <- BC+1
++ 004 00000100 INR   inrb  b          R       :B <- B+1
++ 005 00000101 DCR   dcrb  b          R       :B <- B-1
++ 006 00000110 MVI   mvib  b,d8   1           :B <- byte 2
++ 007 00000111 RLC   rlc              NA      :A = A << 1; bit 0 = prev bit 7; CY = prev bit 7
++ 008 00001000 -
++ 009 00001001 DAD   dadb  b          R       :HL = HL + BC
++ 010 00001010 LDAX  ldaxb b          R       :A <- (BC)
++ 011 00001011 DCX   dcxb  b          R       :BC = BC-1
++ 012 00001100 INR   inrc  c          R       :C <- C+1
++ 013 00001101 DCR   dcrc  c          R       :C <-C-1
++ 014 00001110 MVI   mvic  c,d8   1           :C <- byte 2
++ 015 00001111 RRC   rrc              NA      :A = A >> 1; bit 7 = prev bit 0; CY = prev bit 0
++ 016 00010000 -
++ 017 00010001 LXI   lxid  d,d16  2           :D <- byte 3, E <- byte 2
++ 018 00010010 STAX  staxd d          R       :(DE) <- A
++ 019 00010011 INX   inxd  d          R       :DE <- DE + 1
++ 020 00010100 INR   inrd  d          R       :D <- D+1
++ 021 00010101 DCR   dcrd  d          R       :D <- D-1
++ 022 00010110 MVI   mvid  d,d8   1           :D <- byte 2
++ 023 00010111 RAL   ral              NA      :A = A << 1; bit 0 = prev CY; CY = prev bit 7
++ 024 00011000 -
++ 025 00011001 DAD   dadd  d          R       :HL = HL + DE
++ 026 00011010 LDAX  ldaxd d          R       :A <- (DE)
++ 027 00011011 DCX   dcxd  d          R       :DE = DE-1
++ 028 00011100 INR   inre  e          R       :E <-E+1
++ 029 00011101 DCR   dcre  e          R       :E <- E-1
++ 030 00011110 MVI   mvie  e,d8   1           :E <- byte 2
++ 031 00011111 RAR   rar              NA      :A = A >> 1; bit 7 = prev bit 7; CY = prev bit 0
++ 032 00100000 RIM   rim              NA      :special
++ 033 00100001 LXI   lxih  h,d16  2           :H <- byte 3, L <- byte 2
++ 034 00100010 SHLD  shld  adr    2   adr     :(adr) <-L; (adr+1)<-H
++ 035 00100011 INX   inxh  h          R       :HL <- HL + 1
++ 036 00100100 INR   inrh  h          R       :H <- H+1
++ 037 00100101 DCR   dcrh  h          R       :H <- H-1
++ 038 00100110 MVI   mvih  h,d8   1           :H <- byte 2
++ 039 00100111 DAA   daa              NA      :special
++ 040 00101000 -
++ 041 00101001 DAD   dadh  h          R       :HL = HL + HI
++ 042 00101010 LHLD  lhld  adr    2   adr     :L <- (adr); H<-(adr+1)
++ 043 00101011 DCX   dcxh  h          R       :HL = HL-1
++ 044 00101100 INR   inrl  l          R       :L <- L+1
++ 045 00101101 DCR   dcrl  l          R       :L <- L-1
++ 046 00101110 MVI   mvil  l,d8   1           :L <- byte 2
++ 047 00101111 CMA   cma              NA      :A <- !A
++ 048 00110000 SIM   sim              NA      :special
++ 049 00110001 LXI   lxisp sp,d16 2           :SP.hi <- byte 3, SP.lo <- byte 2
++ 050 00110010 STA   sta   adr    2   adr     :(adr) <- A
++ 051 00110011 INX   inxsp sp         R       :SP = SP + 1
++ 052 00110100 INR   inrm  m          R       :(HL) <- (HL)+1
++ 053 00110101 DCR   dcrm  m          R       :(HL) <- (HL)-1
++ 054 00110110 MVI   mvim  m,d8   1           :(HL) <- byte 2
++ 055 00110111 STC   stc              adr     :CY = 1
++ 056 00111000 -
++ 057 00111001 DAD   dadsp sp         R       :HL = HL + SP
++ 058 00111010 LDA   lda   adr    2   adr     :A <- (adr)
++ 059 00111011 DCX   dcxsp sp         R       :SP = SP-1
++ 060 00111100 INR   inra  a          R       :A <- A+1
++ 061 00111101 DCR   dcra  a          R       :A <- A-1
++ 062 00111110 MVI   mvia  a,d8   1           :A <- byte 2
++ 063 00111111 CMC   cmc              NA      :CY=!CY
++ 064 01000000 MOV   movbb b,b                :B <- B
++ 065 01000001 MOV   movbc b,c                :B <- C
++ 066 01000010 MOV   movbd b,d                :B <- D
++ 067 01000011 MOV   movbe b,e                :B <- E
++ 068 01000100 MOV   movbh b,h                :B <- H
++ 069 01000101 MOV   movbl b,l                :B <- L
++ 070 01000110 MOV   movbm b,m                :B <- (HL)
++ 071 01000111 MOV   movba b,a                :B <- A
++ 072 01001000 MOV   movcb c,b                :C <- B
++ 073 01001001 MOV   movcc c,c                :C <- C
++ 074 01001010 MOV   movcd c,d                :C <- D
++ 075 01001011 MOV   movce c,e                :C <- E
++ 076 01001100 MOV   movch c,h                :C <- H
++ 077 01001101 MOV   movcl c,l                :C <- L
++ 078 01001110 MOV   movcm c,m                :C <- (HL)
++ 079 01001111 MOV   movca c,a                :C <- A
++ 080 01010000 MOV   movdb d,b                :D <- B
++ 081 01010001 MOV   movdc d,c                :D <- C
++ 082 01010010 MOV   movdd d,d                :D <- D
++ 083 01010011 MOV   movde d,e                :D <- E
++ 084 01010100 MOV   movdh d,h                :D <- H
++ 085 01010101 MOV   movdl d,l                :D <- L
++ 086 01010110 MOV   movdm d,m                :D <- (HL)
++ 087 01010111 MOV   movda d,a                :D <- A
++ 088 01011000 MOV   moveb e,b                :E <- B
++ 089 01011001 MOV   movec e,c                :E <- C
++ 090 01011010 MOV   moved e,d                :E <- D
++ 091 01011011 MOV   movee e,e                :E <- E
++ 092 01011100 MOV   moveh e,h                :E <- H
++ 093 01011101 MOV   movel e,l                :E <- L
++ 094 01011110 MOV   movem e,m                :E <- (HL)
++ 095 01011111 MOV   movea e,a                :E <- A
++ 096 01100000 MOV   movhb h,b                :H <- B
++ 097 01100001 MOV   movhc h,c                :H <- C
++ 098 01100010 MOV   movhd h,d                :H <- D
++ 099 01100011 MOV   movhe h,e                :H <- E
++ 100 01100100 MOV   movhh h,h                :H <- H
++ 101 01100101 MOV   movhl h,l                :H <- L
++ 102 01100110 MOV   movhm h,m                :H <- (HL)
++ 103 01100111 MOV   movha h,a                :H <- A
++ 104 01101000 MOV   movlb l,b                :L <- B
++ 105 01101001 MOV   movlc l,c                :L <- C
++ 106 01101010 MOV   movld l,d                :L <- D
++ 107 01101011 MOV   movle l,e                :L <- E
++ 108 01101100 MOV   movlh l,h                :L <- H
++ 109 01101101 MOV   movll l,l                :L <- L
++ 110 01101110 MOV   movlm l,m                :L <- (HL)
++ 111 01101111 MOV   movla l,a                :L <- A
++ 112 01110000 MOV   movmb m,b                :(HL) <- B
++ 113 01110001 MOV   movmc m,c                :(HL) <- C
++ 114 01110010 MOV   movmd m,d                :(HL) <- D
++ 115 01110011 MOV   movme m,e                :(HL) <- E
++ 116 01110100 MOV   movmh m,h                :(HL) <- H
++ 117 01110101 MOV   movml m,l                :(HL) <- L
++ 118 01110110 HLT   hlt              NA      :special
++ 119 01110111 MOV   movma m,a                :(HL) <- A
++ 120 01111000 MOV   movab a,b                :A <- B
++ 121 01111001 MOV   movac a,c                :A <- C
++ 122 01111010 MOV   movad a,d                :A <- D
++ 123 01111011 MOV   movae a,e                :A <- E
++ 124 01111100 MOV   movah a,h                :A <- H
++ 125 01111101 MOV   moval a,l                :A <- L
++ 126 01111110 MOV   movam a,m                :A <- (HL)
++ 127 01111111 MOV   movaa a,a                :A <- A
++ 128 10000000 ADD   addb  b          R       :A <- A + B
++ 129 10000001 ADD   addc  c          R       :A <- A + C
++ 130 10000010 ADD   addd  d          R       :A <- A + D
++ 131 10000011 ADD   adde  e          R       :A <- A + E
++ 132 10000100 ADD   addh  h          R       :A <- A + H
++ 133 10000101 ADD   addl  l          R       :A <- A + L
++ 134 10000110 ADD   addm  m          R       :A <- A + (HL)
++ 135 10000111 ADD   adda  a          R       :A <- A + A
++ 136 10001000 ADC   adcb  b          R       :A <- A + B + CY
++ 137 10001001 ADC   adcc  c          R       :A <- A + C + CY
++ 138 10001010 ADC   adcd  d          R       :A <- A + D + CY
++ 139 10001011 ADC   adce  e          R       :A <- A + E + CY
++ 140 10001100 ADC   adch  h          R       :A <- A + H + CY
++ 141 10001101 ADC   adcl  l          R       :A <- A + L + CY
++ 142 10001110 ADC   adcm  m          R       :A <- A + (HL) + CY
++ 143 10001111 ADC   adca  a          R       :A <- A + A + CY
++ 144 10010000 SUB   subb  b          R       :A <- A - B
++ 145 10010001 SUB   subc  c          R       :A <- A - C
++ 146 10010010 SUB   subd  d          R       :A <- A + D
++ 147 10010011 SUB   sube  e          R       :A <- A - E
++ 148 10010100 SUB   subh  h          R       :A <- A + H
++ 149 10010101 SUB   subl  l          R       :A <- A - L
++ 150 10010110 SUB   subm  m          R       :A <- A + (HL)
++ 151 10010111 SUB   suba  a          R       :A <- A - A - CY
++ 152 10011000 SBB   sbbb  b          R       :A <- A - B - CY
++ 153 10011001 SBB   sbbc  c          R       :A <- A - C - CY
++ 154 10011010 SBB   sbbd  d          R       :A <- A - D - CY
++ 155 10011011 SBB   sbbe  e          R       :A <- A - E - CY
++ 156 10011100 SBB   sbbh  h          R       :A <- A - H - CY
++ 157 10011101 SBB   sbbl  l          R       :A <- A - L - CY
++ 158 10011110 SBB   sbbm  m          R       :A <- A - (HL) - CY
++ 159 10011111 SBB   sbba  a          R       :A <- A - A - CY
++ 160 10100000 ANA   anab  b          R       :A <- A & B
++ 161 10100001 ANA   anac  c          R       :A <- A & C
++ 162 10100010 ANA   anad  d          R       :A <- A & D
++ 163 10100011 ANA   anae  e          R       :A <- A & E
++ 164 10100100 ANA   anah  h          R       :A <- A & H
++ 165 10100101 ANA   anal  l          R       :A <- A & L
++ 166 10100110 ANA   anam  m          R       :A <- A & (HL)
++ 167 10100111 ANA   anaa  a          R       :A <- A & A
++ 168 10101000 XRA   xrab  b          R       :A <- A ^ B
++ 169 10101001 XRA   xrac  c          R       :A <- A ^ C
++ 170 10101010 XRA   xrad  d          R       :A <- A ^ D
++ 171 10101011 XRA   xrae  e          R       :A <- A ^ E
++ 172 10101100 XRA   xrah  h          R       :A <- A ^ H
++ 173 10101101 XRA   xral  l          R       :A <- A ^ L
++ 174 10101110 XRA   xram  m          R       :A <- A ^ (HL)
++ 175 10101111 XRA   xraa  a          R       :A <- A ^ A
++ 176 10110000 ORA   orab  b          R       :A <- A | B
++ 177 10110001 ORA   orac  c          R       :A <- A | C
++ 178 10110010 ORA   orad  d          R       :A <- A | D
++ 179 10110011 ORA   orae  e          R       :A <- A | E
++ 180 10110100 ORA   orah  h          R       :A <- A | H
++ 181 10110101 ORA   oral  l          R       :A <- A | L
++ 182 10110110 ORA   oram  m          R       :A <- A | (HL)
++ 183 10110111 ORA   oraa  a          R       :A <- A | A
++ 184 10111000 CMP   cmpb  b          R       :A - B
++ 185 10111001 CMP   cmpc  c          R       :A - C
++ 186 10111010 CMP   cmpd  d          R       :A - D
++ 187 10111011 CMP   cmpe  e          R       :A - E
++ 188 10111100 CMP   cmph  h          R       :A - H
++ 189 10111101 CMP   cmpl  l          R       :A - L
++ 190 10111110 CMP   cmpm  m          R       :A - (HL)
++ 191 10111111 CMP   cmpa  a          R       :A - A
++ 192 11000000 RNZ   rnz              NA      :if NZ, RET
++ 193 11000001 POP   popb  b          R       :C <- (sp); B <- (sp+1); sp <- sp+2
++ 194 11000010 JNZ   jnz   adr    2   adr     :if NZ, PC < adr
++ 195 11000011 JMP   jmp   adr    2   adr     :PC <= adr
++ 196 11000100 CNZ   cnz   adr    2   adr     :if NZ, CALL adr
++ 197 11000101 PUSH  pushb b          R       :(sp-2)<-C; (sp-1)<-B; sp <- sp - 2
++ 198 11000110 ADI   adi   d8     1   D8      :A <- A + byte
++ 199 11000111 RST   rst0  0          D8      :CALL $0
++ 200 11001000 RZ    rz               NA      :if Z, RET
++ 201 11001001 RET   ret              NA      :PC.lo <- (sp); PC.hi<-(sp+1); SP <- SP+2
++ 202 11001010 JZ    jz    adr    2   adr     :if Z, PC <- adr
++ 203 11001011 -
++ 204 11001100 CZ    cz    adr    2   adr     :if Z, CALL adr
++ 205 11001101 CALL  call  adr    2   adr     :(SP-1)<-PC.hi;(SP-2)<-PC.lo;SP<-SP+2;PC=adr
++ 206 11001110 ACI   aci   d8     1   D8      :A <- A + data + CY
++ 207 11001111 RST   rst1  1          D8      :CALL $8
++ 208 11010000 RNC   rnc              NA      :if NCY, RET
++ 209 11010001 POP   popd  d          R       :E <- (sp); D <- (sp+1); sp <- sp+2
++ 210 11010010 JNC   jnc   adr    2   adr     :if NCY, PC<-adr
++ 211 11010011 OUT   out   d8     1   D8      :special
++ 212 11010100 CNC   cnc   adr    2   adr     :if NCY, CAL adr
++ 213 11010101 PUSH  pushd d          R       :(sp-2)<-E; (sp-1)<-D; sp <- sp - 2
++ 214 11010110 SUI   sui   d8     1   D8      :A <- A - data
++ 215 11010111 RST   rst2  2          D8      :CALL $10
++ 216 11011000 RC    rc               NA      :if CY, RET
++ 217 11011001 -
++ 218 11011010 JC    jc    adr    2   adr     :if CY, PC<-adr
++ 219 11011011 IN    in    d8     1   D8      :special
++ 220 11011100 CC    cc    adr    2   adr     :if CY, CALL adr
++ 221 11011101 -
++ 222 11011110 SBI   sbi   d8     1   D8      :A <- A - data - CY
++ 223 11011111 RST   rst3  3          D8      :CALL $18
++ 224 11100000 RPO   rpo              NA      :if PO, RET
++ 225 11100001 POP   poph  h          R       :L <- (sp); H <- (sp+1); sp <- sp+2
++ 226 11100010 JPO   jpo   adr    2   adr     :if PO, PC <- adr
++ 227 11100011 XTHL  xthl             NA      :L <-> (SP); H <-> (SP+1) ... Set H:L to same value at the SP address and SP +1
++ 228 11100100 CPO   cpo   adr    2   adr     :if PO, CALL adr
++ 229 11100101 PUSH  pushh h          R       :(sp-2)<-L; (sp-1)<-H; sp <- sp - 2
++ 230 11100110 ANI   ani   d8     1   D8      :A <- A & data
++ 231 11100111 RST   rst4  4          D8      :CALL $20
++ 232 11101000 RPE   rpe              NA      :if PE, RET
++ 233 11101001 PCHL  pchl             NA      :PC.hi <- H; PC.lo <- L
++ 234 11101010 JPE   jpe   adr    2   adr     :if PE, PC <- adr
++ 235 11101011 XCHG  xchg             NA      :H <-> D; L <-> E
++ 236 11101100 CPE   cpe   adr    2   adr     :if PE, CALL adr
++ 237 11101101 -
++ 238 11101110 XRI   xri   d8     1   D8      :A <- A ^ data
++ 239 11101111 RST   rst5  5          D8      :CALL $28
++ 240 11110000 RP    rp               NA      :if P, RET
++ 241 11110001 POP   popa  psw        R       :flags <- (sp); A <- (sp+1); sp <- sp+2
++ 242 11110010 JP    jp    adr    2   adr     :if P=1 PC <- adr
++ 243 11110011 DI    di               NA      :special
++ 244 11110100 CP    cp    adr    2   adr     :if P, PC <- adr
++ 245 11110101 PUSH  pusha psw        R       :(sp-2)<-flags; (sp-1)<-A; sp <- sp - 2
++ 246 11110110 ORI   ori   d8     1   D8      :A <- A | data
++ 247 11110111 RST   rst6  6          D8      :CALL $30
++ 248 11111000 RM    rm               NA      :if M, RET
++ 249 11111001 SPHL  sphl             NA      :SP=HL      ... Set SP to same value as H:L
++ 250 11111010 JM    jm    adr    2   adr     :if M, PC <- adr
++ 251 11111011 EI    ei               NA      :special
++ 252 11111100 CM    cm    adr    2   adr     :if M, CALL adr
++ 253 11111101 -
++ 254 11111110 CPI   cpi   d8     1   D8      :A - data
++ 255 11111111 RST   rst7  7          D8      :CALL $38

--------------------------------------------------------------------------------
eof
